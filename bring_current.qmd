---
title: "Bring Current Rates"
format: html
---

```{r get data, include=FALSE}
library(dplyr)
library(snapdragon)
library(highcharter)
library(lubridate)
library(reshape2)
library(magrittr)
library(pins)
opts <- getOption("highcharter.lang")
opts$thousandsSep <- ","
options(highcharter.lang = opts)

sd_board_register()
bc <- pin_get('bringCurrent', board='rsconnect')$bcNHS

  outputdf <- bc %>% 
    select(
      Week,
      DelinquencyAge7,
      BCRateCuml
    ) %>% 
    rename(
      Cohort = Week,
      Age = DelinquencyAge7,
      value = BCRateCuml
    ) %>%
    mutate(
      x = as.numeric(factor(Age)),
      value = round(value * 100, 2)
    ) %>% 
    bind_rows(
      bc %>% 
        group_by(
          Cohort = Week,
          value = Delinquencies
        ) %>% 
        summarise(
          Age = 'New Delinquencies'
        ) %>% 
        mutate(
          x = 0
        )
    ) %>% 
    filter(
      Cohort >= '2020-01-01'
    ) %>% 
    arrange(
      Cohort,
      Age
    ) %>% 
    mutate(
      Age = factor(Age ,levels = c(
        "New Delinquencies","Day 0","Week 1",        
        "Week 2","Week 3","Week 4","Week 5",           
        "Week 6","Week 7","Week 8","Week 9","Week 10+"
      ))
    ) %>% 
    group_by(
      Age
    ) %>% 
    mutate(
      y = row_number() - 1
    ) %>% na.omit() %>% 
    filter(
    x - 1 < (floor_date(Sys.Date(), 'week', week_start = 1) -  Cohort) / 7
  )
    df = outputdf 
    myProd = 'RTO'
    myHS = 'Hardship accounts excluded'
  
  hcdf <- df %>%
    group_by(
      type = 'heatmap',
      colorAxis = x
    ) %>%
    arrange(
      Cohort,
      Age
    ) %>%
    do(data=list_parse(
      data.frame(
        x = .$x,
        y = .$y,
        value = .$value
      )
    )
  )
 
  # color palette using the input df mean and std dev -> white bg for the new delinquencies column
    Pals <- list()
    #loop through all levels 'columns' in input df and get mean and sd
    for(i in levels(df$Age)) {
      # print(i)
      mm <- mean(df$value[df$Age == i])
      msd <- sd(df$value[df$Age == i])
      # if column is nd then white bg
      if(i == 'New Delinquencies') {
        pal <- list(
          minColor = 'white',
          maxColor = 'white'
        )
      } else {
        pal <- list(
          # min = min(plot_data$value[plot_data$Age == i]),
          # max = max(plot_data$value[plot_data$Age == i]),
          min = mm - (3 * msd),
          max = mm + (3 * msd),
          #colo stops
          stops = list(
            list(0.15,'#FDE725'),
            # list(0.16,'#5DC863'),
            list(0.5,'#21908C'),
            # list(0.84,'#3B528B'),
            list(0.85,'#440154')
          )
        )
      }
      #
      Pals <- c(Pals,list(pal))
    }
  
  ##### highchart using hcdf data
  sd_highchart() %>%
    sdhc_title(text=paste0('LTO Cumulative Bring Current Rates By Cohort')) %>%
    sdhc_subtitle(text = eval(myHS)) %>% 
    hc_add_series_list(
      hcdf
    ) %>%
    hc_legend(
      enabled = FALSE
    ) %>%
    hc_yAxis(
      #show max - 16 rows of data
      min = max(df$y) - 16,
      max = max(df$y),
      scrollbar = list(
        enabled = FALSE
      ),
      categories = factor(unique(df$Cohort))
    ) %>%
    hc_xAxis(
      opposite = TRUE,
      categories = levels(df$Age)
    ) %>%
    hc_plotOptions(
      series = list(
        dataLabels = list(
          overflow = 'none',
          crop = TRUE,
          enabled = TRUE,
          #percentages and thousands comma on new delis
          formatter = JS(
            "function() {
              if (this.point.value == null) {
                return ''
              } else if (this.point.x > 0) {
                return this.point.value + ' %'
              } else {
                return Highcharts.numberFormat(this.point.value, 0)
              };
            }"
          )        
        )
      )
    ) %>% hc_tooltip(
        formatter = JS(
          "function () {
            if (this.point.value == null) {
              return ''
            } else if (this.point.x > 0) {
              return 'BCR ' + this.point.value + ' %'
            } else {
              return 'New Delinquencies ' + Highcharts.numberFormat(this.point.value, 0)
            };
          }"
        )
    )->p
  # %>% hc_exporting(
  #     enabled = TRUE, 
  #     allowHTML = TRUE, 
  #     sourceWidth = 900, 
  #     sourceHeight = 600, 
  #     chartOptions = list(
  #       navigator = list(enabled = FALSE),
  #       rangeSelector = list(enabled = FALSE), 
  #       scrollbar = list(enabled = FALSE)
  #     )
  #   ) -> p
  # color palette for color axis of highchart
  p$x$hc_opts$colorAxis <- Pals
  p
  
  
```


## Final Product

```{r}
p
```

## Step 1: Get the data


## Step 2: Write a function to produce a heatmap


## Step 3: Create UI elements