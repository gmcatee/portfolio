---
title: "Bring Current Rates"
format: 
  html:
    page-layout: full
---

## Project
> How long does it take us to recover delinquent Leases? Using a data source that tracks delinquency events (timestamps for delinquncy_ts and recovered_ts) I created a heatmap using 'reactable' that shows the rate of recovery in weekly tranches. Most important time is Day 0 ("How many cured the same day they went delinquent?"); in this example about 80% of New Delinquencies are recovered after 9 weeks. Other drilldowns of this data help managers identifty issues in the effort to bring leases back on schedule.

```{r get data, include=FALSE}
library(dplyr)
library(highcharter)
library(lubridate)
library(reshape2)
library(magrittr)
library(pins)
library(tidyr)
library(reactable)
library(htmlwidgets)
library(manipulateWidget)

opts <- getOption("highcharter.lang")
opts$thousandsSep <- ","
options(highcharter.lang = opts)

bc <- read.csv('bc_data.csv') %>% select(-X)

outputdf <- bc %>% 
    transmute(
      Week=as.Date(Week),
      DelinquencyAge7,
      BCRateCuml
    ) %>% 
    rename(
      Cohort = Week,
      Age = DelinquencyAge7,
      value = BCRateCuml
    ) %>%
    mutate(
      x = as.numeric(factor(Age,levels = c(
        "Day 0","Week 1",        
        "Week 2","Week 3","Week 4","Week 5",           
        "Week 6","Week 7","Week 8","Week 9","Week 10+"
      ))),
      value = round(value * 100, 2)
    ) %>% 
    bind_rows(
      bc %>% 
        group_by(
          Cohort = as.Date(Week),
          value = Delinquencies
        ) %>% 
        summarise(
          Age = 'New Delinquencies'
        ) %>% 
        mutate(
          x = 0
        )
    ) %>% 
    filter(
      Cohort >= '2020-01-01'
    ) %>% 
    arrange(
      Cohort,
      Age
    ) %>% 
    mutate(
      Age = factor(Age ,levels = c(
        "New Delinquencies","Day 0","Week 1",        
        "Week 2","Week 3","Week 4","Week 5",           
        "Week 6","Week 7","Week 8","Week 9","Week 10+"
      ))
    ) %>% 
    group_by(
      Age
    ) %>% 
    mutate(
      y = row_number() - 1,
      x=ifelse(Age=='New Delinquencies',0,x)
    ) %>% na.omit() %>%
    filter(
    x - 1 < (floor_date(Sys.Date(), 'week', week_start = 1) -  Cohort) / 7
  )
  
  hcdf <- outputdf %>%
    group_by(
      type = 'heatmap',
      colorAxis = x
    ) %>%
    arrange(
      Cohort,
      Age
    ) %>%
    do(data=list_parse(
      data.frame(
        x = .$x,
        y = .$y,
        value = .$value
      )
    )
  )
 
  # color palette using the input df mean and std dev -> white bg for the new delinquencies column
    Pals <- list()
    #loop through all levels 'columns' in input df and get mean and sd
    for(i in levels(outputdf$Age)) {
      # print(i)
      mm <- mean(outputdf$value[outputdf$Age == i])
      msd <- sd(outputdf$value[outputdf$Age == i])
      # if column is nd then white bg
      if(i == 'New Delinquencies') {
        pal <- list(
          minColor = 'white',
          maxColor = 'white'
        )
      } else {
        pal <- list(
          # min = min(plot_data$value[plot_data$Age == i]),
          # max = max(plot_data$value[plot_data$Age == i]),
          min = mm - (3 * msd),
          max = mm + (3 * msd),
          #colo stops
          stops = list(
            list(0.15,'#FDE725'),
            # list(0.16,'#5DC863'),
            list(0.5,'#21908C'),
            # list(0.84,'#3B528B'),
            list(0.85,'#440154')
          )
        )
      }
      #
      Pals <- c(Pals,list(pal))
    }
  
  ##### highchart using hcdf data
  highchart() %>%
    hc_title(text=paste0('LTO Cumulative Bring Current Rates By Cohort'), align='left') %>%
    hc_add_series_list(
      hcdf
    ) %>%
    hc_legend(
      enabled = FALSE
    ) %>%
    hc_yAxis(
      #show max - 16 rows of data
      min = max(outputdf$y) - 16,
      max = max(outputdf$y),
      scrollbar = list(
        enabled = FALSE
      ),
      categories = factor(unique(outputdf$Cohort))
    ) %>%
    hc_xAxis(
      opposite = TRUE,
      categories = levels(outputdf$Age)
    ) %>%
    hc_plotOptions(
      series = list(
        dataLabels = list(
          overflow = 'none',
          crop = TRUE,
          enabled = TRUE,
          #percentages and thousands comma on new delis
          formatter = JS(
            "function() {
              if (this.point.value == null) {
                return ''
              } else if (this.point.x > 0) {
                return this.point.value + ' %'
              } else {
                return Highcharts.numberFormat(this.point.value, 0)
              };
            }"
          )        
        )
      )
    ) %>% hc_tooltip(
        formatter = JS(
          "function () {
            if (this.point.value == null) {
              return ''
            } else if (this.point.x > 0) {
              return 'BCR ' + this.point.value + ' %'
            } else {
              return 'New Delinquencies ' + Highcharts.numberFormat(this.point.value, 0)
            };
          }"
        )
    ) -> p
  
  # color palette for color axis of highchart
  p$x$hc_opts$colorAxis <- Pals
  
 # code for line chart
  df = bc
  cohort_age = 0
  hardship = "Exclude"
  myRate = 'Cumulative'
  
  cohort_age <- as.numeric(cohort_age)
  
  if(hardship == "Exclude") {
    subtitle = 'Hardship accounts excluded'
  } else {
    subtitle = 'Hardship accounts included'
  }
  
  if(myRate == 'Individual'){
    myRate='BCRate'
  }else{
    myRate='BCRateCuml'
  }
  
  my_labels <-  data.frame(
    date_label = seq(
      as.Date('2023-01-01'),
      ceiling_date(Sys.Date(), 'year') - 1,
      by='week'
    ) + 1
  ) %>% 
    mutate(
      date_label = floor_date(date_label, 'week',week_start = 1),
      week_num = week(date_label)
    ) %>% filter(year(date_label)=="2023")
  
  bca_plot_data <- df %>% 
    na.omit() %>% 
    mutate(
      DelinquencyAge7 = factor(DelinquencyAge7, levels = c("Day 0" ,"Week 1", "Week 2",
                                              "Week 3", "Week 4", "Week 5",
                                              "Week 6", "Week 7", "Week 8",
                                              "Week 9", "Week 10+")),
      year = year(Week),
      week_num = week(Week),
      week_actual = as.Date(Week) + lubridate::weeks(as.integer(DelinquencyAge7) - 1),
      bcr = ifelse(week_actual <= floor_date(Sys.Date(), 'week', week_start = 1), eval(sym(myRate)), NA)
    ) %>% 
    filter(
      year >= year(Sys.Date()) - 3
    ) %>% 
    merge(
      my_labels,
      by = 'week_num'
    )
  
  if (cohort_age == 0) {
    my_filter <- paste0('Day ',cohort_age)
    cohort_age_ref <- cohort_age
  } else if(cohort_age == 10){
    my_filter <- paste0('Week ',cohort_age,'+')
    cohort_age_ref <- cohort_age - 1
  } else {
    my_filter <- paste0('Week ',cohort_age)
    cohort_age_ref <- cohort_age - 1
  }
  
  hcdf <- bca_plot_data %>% 
    filter(
      DelinquencyAge7 == eval(my_filter)
    ) %>% 
    group_by(
      name = year,
      type = 'line',
      color = case_when(
        year == year(Sys.Date()) ~ "#FF7214",
        year == year(Sys.Date()) -1 ~ "#003767",
        year == year(Sys.Date()) -2 ~ "#5BC2E7",
        year == year(Sys.Date()) -3 ~ "#CCCCCC",
        year == year(Sys.Date()) -4 ~ "#8DC63F",
        year == year(Sys.Date()) -5 ~ "#8651A1"
      ), 
      lineWidth = case_when(
        year == year(Sys.Date()) ~ 3,
        year == year(Sys.Date()) - 1 ~ 2,
        year == year(Sys.Date()) - 2 ~ 2,
        year ==year(Sys.Date())-3 ~ 2
      )
    ) %>% 
    do(data=list_parse(
      data.frame(
        x = datetime_to_timestamp(.$date_label),
        y = round(.$bcr * 100, 2)
      )
    ))
  
  covid_line = floor_date(as.Date('2023-03-12'), 'week', week_start = 1) - weeks(cohort_age_ref)
  stimulus_line = floor_date(as.Date('2023-04-15'), 'week', week_start = 1) - weeks(cohort_age_ref)
  
  line <- highchart(type = 'stock') %>% 
    hc_title(text = paste0('Day 0 Bring Current Rates'), align='left') %>%
    # sdhc_subtitle(text = subtitle) %>% 
    hc_add_series_list(
      hcdf
    ) %>% 
    hc_xAxis(
      plotLines = list(
        list(
          value = datetime_to_timestamp(covid_line), label = list(text='Covid 2020', color = "#696969")
        ),
        list(
          value = datetime_to_timestamp(stimulus_line), label = list(text='Stimulus 2020', align = 'left')
        )
      )
    ) %>% 
    hc_tooltip(
      valueSuffix='%'
      ) %>% 
    hc_legend(enabled = TRUE) %>% 
    hc_navigator(enabled=FALSE) %>%
    hc_rangeSelector(enabled=FALSE) %>%
    hc_scrollbar(enabled=FALSE) %>% 
    hc_size(height=350)

```

## Final Product

```{r plots, echo = FALSE}
p
# combineWidgets(p, line, ncol=2)
```

```{r linep, echo=FALSE}
line
```

## Steps

### SQL Query returning all new delinquencies and a column for recovered_ts
```{r query, echo=TRUE, eval=FALSE}
# simplified for the sake of the demo
 bcr_data <- presto(
   "
   SELECT
     DATE(delinquency_ts AT TIME ZONE 'America/Denver') AS delinquency_dt
     , DATE(recovered_ts AT TIME ZONE 'America/Denver') AS recovery_dt
     , de.customer_application_id
     , CASE WHEN recovered_ts IS NOT NULL THEN
         DATE_DIFF('day',
         DATE(delinquency_ts AT TIME ZONE 'America/Denver'),
         DATE(recovered_ts AT TIME ZONE 'America/Denver'))
         ELSE NULL
       END AS days
   FROM de_table de
   WHERE DATE(delinquency_ts AT TIME ZONE 'America/Denver') >= date '2020-01-01'
 ")
```

### Save in Pin (pins data stored on Posit Connect server)
```{r, echo=TRUE, eval=FALSE}
pin_write(posit_board, bcr_data, "bcr_pinned_data")
```

### Function for creating heatmap/line chart (contents of fxn shown)
```{r fxn hmp, echo=TRUE, eval=FALSE}
Pals <- list()
#loop through all levels 'columns' in input df and get mean and sd
for(i in levels(df$Age)) {
  mm <- mean(df$value[df$Age == i])
  msd <- sd(df$value[df$Age == i])
  # if column is nd then white bg
  if(i == 'New Delinquencies') {
    pal <- list(
      minColor = 'white',
      maxColor = 'white'
    )
  } else {
    pal <- list(
      min = mm - (3 * msd),
      max = mm + (3 * msd),
      #color stops
      stops = list(
        list(0.15,'#FDE725'),
        # list(0.16,'#5DC863'),
        list(0.5,'#21908C'),
        # list(0.84,'#3B528B'),
        list(0.85,'#440154')
      )
    )
  }
  # create list of color palettes
  Pals <- c(Pals,list(pal))
}
  
  ##### highchart using hcdf data
  highchart() %>%
    hc_title(text=paste0('Cumulative Bring Current Rates')) %>%
    # sdhc_subtitle(text = eval(myHS)) %>% 
    hc_add_series_list(
      hcdf
    ) %>%
    hc_legend(
      enabled = FALSE
    ) %>%
    hc_yAxis(
      #show max - 16 rows of data
      min = max(df$y) - 16,
      max = max(df$y),
      scrollbar = list(
        enabled = FALSE
      ),
      categories = factor(unique(df$Cohort))
    ) %>%
    hc_xAxis(
      opposite = TRUE,
      categories = levels(df$Age)
    ) %>%
    hc_plotOptions(
      series = list(
        dataLabels = list(
          overflow = 'none',
          crop = TRUE,
          enabled = TRUE,
          #percentages and thousands comma on new delis
          formatter = JS(
            "function() {
              if (this.point.value == null) {
                return ''
              } else if (this.point.x > 0) {
                return this.point.value + ' %'
              } else {
                return Highcharts.numberFormat(this.point.value, 0)
              };
            }"
          )        
        )
      )
    ) %>% 
    hc_tooltip( # custom tooltip
        formatter = JS(
          "function () {
            if (this.point.value == null) {
              return ''
            } else if (this.point.x > 0) {
              return 'BCR ' + this.point.value + ' %'
            } else {
              return 'New Delinquencies ' + Highcharts.numberFormat(this.point.value, 0)
            };
          }"
        )
    )->p
  # set color Axis to list of colors in Pals
  p$x$hc_opts$colorAxis <- Pals
```

### Line chart using highcharts (contents of fxn shown)
```{r line, echo=TRUE, eval=FALSE}
  # hard coding some variables typically used in reactive function
  cohort_age = 0
  hardship = "Exclude"
  myRate = 'Cumulative'
  
  if(hardship == "Exclude") {
    subtitle = 'Hardship accounts excluded'
  } else {
    subtitle = 'Hardship accounts included'
  }
  
  if(myRate == 'Individual'){
    myRate='BCRate'
  }else{
    myRate='BCRateCuml'
  }
  
  # data frame of labels for Year Over Year view
  my_labels <-  data.frame(
    date_label = seq(
      as.Date('2023-01-01'),
      ceiling_date(Sys.Date(), 'year') - 1,
      by='week'
    ) + 1
  ) %>% 
    mutate(
      date_label = floor_date(date_label, 'week',week_start = 1),
      week_num = week(date_label)
    ) %>% filter(year(date_label)=="2023")
  
  bca_plot_data <- df %>%
    na.omit() %>% 
    mutate(
      year = year(Week),
      week_num = week(Week),
      week_actual = Week + weeks(as.integer(DelinquencyAge7) - 1),
      bcr = ifelse(week_actual <= floor_date(Sys.Date(), 'week', week_start = 1), eval(sym(myRate)), NA)
    ) %>% 
    filter(
      year >= year(Sys.Date()) - 3
    ) %>% 
    merge(
      my_labels,
      by = 'week_num'
    )
  
  if (cohort_age == 0) {
    my_filter <- paste0('Day ',cohort_age)
    cohort_age_ref <- cohort_age
  } else if(cohort_age == 10){
    my_filter <- paste0('Week ',cohort_age,'+')
    cohort_age_ref <- cohort_age - 1
  } else {
    my_filter <- paste0('Week ',cohort_age)
    cohort_age_ref <- cohort_age - 1
  }
  
  # data prep for highchart
  hcdf <- bca_plot_data %>% 
    filter(
      DelinquencyAge7 == eval(my_filter)
    ) %>% 
    group_by(
      name = year,
      type = 'line',
      color = case_when(
        year == year(Sys.Date()) ~ "#FF7214",
        year == year(Sys.Date()) -1 ~ "#003767",
        year == year(Sys.Date()) -2 ~ "#5BC2E7",
        year == year(Sys.Date()) -3 ~ "#CCCCCC",
        year == year(Sys.Date()) -4 ~ "#8DC63F",
        year == year(Sys.Date()) -5 ~ "#8651A1"
      ), 
      lineWidth = case_when(
        year == year(Sys.Date()) ~ 3,
        year == year(Sys.Date()) - 1 ~ 2,
        year == year(Sys.Date()) - 2 ~ 2,
        year ==year(Sys.Date())-3 ~ 2
      )
    ) %>% 
    do(data=list_parse(
      data.frame(
        x = datetime_to_timestamp(.$date_label),
        y = round(.$bcr * 100, 2)
      )
    ))

highchart(type = 'stock') %>% 
    hc_title(text = paste0('Day 0 Bring Current Rates')) %>%
    # sdhc_subtitle(text = subtitle) %>% 
    hc_add_series_list(
      hcdf
    ) %>% 
    hc_xAxis(
      plotLines = list(
        list(
          value = datetime_to_timestamp(covid_line), label = list(text='Covid 2020', color = "#696969")
        ),
        list(
          value = datetime_to_timestamp(stimulus_line), label = list(text='Stimulus 2020', align = 'left')
        )
      )
    ) %>% 
    hc_tooltip(
      valueSuffix='%'
      ) %>% 
    hc_legend(enabled = TRUE) %>% 
    hc_navigator(enabled=FALSE) %>%
    hc_rangeSelector(enabled=FALSE) %>%
    hc_scrollbar(enabled=FALSE)   
```

### These steps are combined with some Shiny reactive elements in dashboards for switching between options of charts/cohorts etc
